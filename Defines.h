/*определения для исключения/включения операций, которые требуются/не требуются в финальной и тестировочной версии*/
#define FINAL (1)
#define TEST (0)
#define REALISE (TEST)

/*===================================================================================================================================================================================================*/
/*===============================================================КОНСТАНТЫ ФОРМИРОВАНИЯ РАБОТЫ ТАЙМЕРА1,2==============================================================================================*/
/*===================================================================================================================================================================================================*/

#define SYS_CLOCK 80000000 //частота тактирования МК, [Гц]

#define TIMER1_FREQ 			 9000 //частота переполнения таймера1, [Гц]
#define TIMER1_PRESCALER 	 43 	//делитель частоты таймера1
#define TIMER1_PERIOD_CODE (SYS_CLOCK/(TIMER1_FREQ*(TIMER1_PRESCALER+1))) //кодовое значение периода тактирования таймера 1 

#define TIMER2_FREQ 			 50000 //частота переполнения таймера2, [Гц]
#define TIMER2_PRESCALER 	 8 	   //делитель частоты таймера2
#define TIMER2_PERIOD_CODE (SYS_CLOCK/(TIMER2_FREQ*(TIMER2_PRESCALER+1))) //кодовое значение периода тактирования таймера 2 

/*===================================================================================================================================================================================================*/
/*===============================================================КОНСТАНТЫ ДЛЯ ВРЕМЕНИ РАЗРЯДА БАТАРЕИ ==============================================================================================*/
/*===================================================================================================================================================================================================*/
#define mc_SECOND_111		1											//один такт таймера, по времени равен 1/TIMER1_PERIOD
#define mc_SECOND_667		mc_SECOND_111*6				//667мкС
#define ONE_m_SECOND		TIMER1_FREQ/1000 			//1 миллисекунда (т.к консанта TIMER1_PERIOD это 1 секунда, то 100миллисекунд получается если одну секунду раздели на 1000)
#define ONE_POINT_EIGHT_m_SECOND	mc_SECOND_111*16 		//1.77 мс
#define TEN_m_SECOND 		ONE_m_SECOND*10				//10 милисекунд
#define ONE_HUNDRED_m_SECOND 	TEN_m_SECOND*10 //100 миллисекунд
#define ONE_HUNDRED_m_SECOND 	TEN_m_SECOND*10 //100 миллисекунд
#define ONE_SECOND 			TIMER1_FREQ 				//одна секунда равна количеству переполнений таймера1 за 1 секунду
#define FIVE_SECOND 		ONE_SECOND*5 					//пять секунд
#define HALF_MINUTE 		ONE_SECOND*30 				//половина минуты
#define ONE_MINUTE 			ONE_SECOND*60 				//одна минута
#define THREE_MINUTE 		ONE_MINUTE*3 					//три минуты
#define FIVE_MINUTE 		ONE_MINUTE*5 					//пять минут
#define TEN_MINUTE 			ONE_MINUTE*10 				//десять минут
#define FIVETEEN_MINUTE ONE_MINUTE*15 				//пятнадцать минут
#define TWENTY_MINUTE		ONE_MINUTE*20 				//двадчать минут
#define THIRTY_MINUTE 	ONE_MINUTE*30 				//тридцать минут

/*===================================================================================================================================================================================================*/
/*============================================================== ***************************** ======================================================================================================*/
/*===================================================================================================================================================================================================*/
#define BATTERY_CAPACITY_PINS (PORT_ReadInputData(MDR_PORTA)&((1<<Bit7)|(1<<Bit6)|(1<<Bit5)|(1<<Bit4)));
#define TIME_DISCHARGE_PINS (PORT_ReadInputData(MDR_PORTA)&((1<<Bit3)|(1<<Bit2)|(1<<Bit1)|(1<<Bit0)));
 
/*===================================================================================================================================================================================================*/
/*===============================================================КОНСТАНТЫ ДЛЯ УПРАВЛЕНИЯ СВЕТОДИОДАМИ===============================================================================================*/
/*===================================================================================================================================================================================================*/

#define COLOR_AMOUNT 		4 		// количество возможных цветов у светодиодов  LED1 и LED2. Задается перечислением Clr.

/*Формирование временных интервалов свечения светодиодов */
#define FLASH_PERIOD 					1000 //период свечения светодиода, [мс]
#define FLASH_KVANT_COUNT 		8 //количество квантов свечения в периоде FLASH_PERIOD
#define FLASH_KVANT_PERIOD 			(FLASH_PERIOD/FLASH_KVANT_COUNT) //период кванта свечения светодиода, [мс]
#define FLASH_KVANT_PERIOD_CODE (FLASH_KVANT_PERIOD*TIMER1_FREQ/1000) //кодовое представление периода кванта свечения светодиода

/*Тип свечения светодиодов*/
/* PERMANENT_FLASH - постоянное свечение, BLINK1_FLASH - мигаение 50/50, BLINK2_FLASH - мигание 20/80*/
#define PERMANENT_FLASH	0xFF  //число в двоичном коде задает кванты свечения (длительность кванта свечения определеяется из FLASH_KVANT_PERIOD ) светодиода,
#define BLINK1_FLASH		0x0F  // где 1 - светодиод в течении заданного кванта светится, 0 - не светиться; например 0x0F=0b00001111, то есть свечение 50/50, каждый бит это квант свечения
#define BLINK2_FLASH    0x01  //количество бит должно равняться FLASH_KVANT_COUNT
#define BLINK3_FLASH    0x0A  //
#define BLINK4_FLASH    0xAA  //
#define BLINK5_FLASH    0xCC  //
#define BLINK6_FLASH    0xFC  //
#define BLINK7_FLASH    0xFA  //

/*Управление светодиодами LED1 (индикация заряда)*/
#define LED_CHARGE_RED    (~PORT_Pin_1) 							//Port_Pin - пин к которому подключается красный цвет LED1. Ставится инверсия (~) т.к активное состояние LED1 для включение красного цвета равно 0 
#define LED_CHARGE_GREEN  (~PORT_Pin_0)								//Port_Pin - пин к которому подключается зеленный цвет LED1. Ставится инверсия (~) т.к активное состояние LED1 для включение зеленного цвета равно 0
#define LED_CHARGE_YELLOW (~(PORT_Pin_0|PORT_Pin_1))  //Port_Pin|Port_Pin - пины к которому подключается желтый цвет LED1. Ставится инверсия (~) т.к активное состояние LED1 для включение желтого цвета равно 0
#define LED_CHARGE_OFF    (~(PORT_Pin_2|PORT_Pin_3))  //активное состояние LED1 для его выключения (LED1 не горит), при этом не состояние LED2 не затрагивается

/*Управление светодиодами LED2 (индикация режима работы)*/
#define LED_MODE_OF_WORK_RED     ~PORT_Pin_3							//Port_Pin - пин к которому подключается красный цвет LED2. Ставится инверсия (~) т.к активное состояние LED2 для включение красного цвета равно 0 
#define LED_MODE_OF_WORK_GREEN   ~PORT_Pin_2							//Port_Pin - пин к которому подключается зеленный цвет LED2. Ставится инверсия (~) т.к активное состояние LED2 для включение зеленного цвета равно 0
#define LED_MODE_OF_WORK_YELLOW  ~(PORT_Pin_2|PORT_Pin_3) //Port_Pin|Port_Pin - пины к которому подключается желтый цвет LED2. Ставится инверсия (~) т.к активное состояние LED2 для включение желтого цвета равно 0
#define LED_MODE_OF_WORK_OFF     ~(PORT_Pin_0|PORT_Pin_1) //активное состояние LED2 для его выключения, при этом не состояние LED2 не затрагивается


/*===================================================================================================================================================================================================*/
/*===============================================================КОНСТАНТЫ ДЛЯ УПРАВЛЕНИЯ РЕЛЕ=======================================================================================================*/
/*===================================================================================================================================================================================================*/

#define RELE_AMOUNT		 3	//количество реле используемых для индикации состояния устройства

/*Управление реле*/
#define RELE_KAN_D		 PORT_Pin_3		//Port_Pin - пин с которого управляется RELE1
#define RELE_BATTERY	 PORT_Pin_2   //Port_Pin - пин с которого управляется RELE2
#define RELE_WARNING	 PORT_Pin_1   //Port_Pin - пин с которого управляется RELE3


/*===================================================================================================================================================================================================*/
/*===============================================================КОНСТАНТЫ ДЛЯ АЦП===================================================================================================================*/
/*===================================================================================================================================================================================================*/
#define MEAS_DATA						10 	 // Размер массива adc_data структуры ADCcontrol для оцифрованных значений 
#define ADC_CHANNEL_CHS		  0x1F // количество возможных каналов оцифровки в МК
#define ADC_CHANNEL_SHIFT   4 	 // на сколько нужно сдвинуть номер канала оцифровки, чтобы записать номер канала оцифровки в соотвествующие биты регистра ADC1_CFG
#define ADC_READY						0xBF // значение флага сигнализации (ADCready_to_calculate) о накоплении оцифрованных значений  в количестве MEAS_DATA в массиве adc_data структуры ADCcontrol


#define Vref  (float)3.3 		// Напряжение питания АЦП напряжение, В
#define Nmax  4095			// Кодовое представление максимального оцифрованного значения (равно значению Vref) (зависит от битности АЦП)

#define R13   1   		    //Сопротивление резистора R13, кОм		
#define R20   15    	 		//Сопротивление резистора R20, кОм   
#define Rdt   (float)0.005    	  //Сопротивление датчика тока, Ом
#define KdI		(float)(Rdt*R20/R13) 			//Коэффициент передачи датчика тока (Сопротивление токового шунта I_LOAD, I_BATTERY, Ом)
// Коэффициент передачи датчиков напряжения
#define R29   (float)15.0    	//Сопротивление резистора R29, кОм			
#define R32   (float)1.0      	//Сопротивление резистора R32, кОм			
#define KdU1  (float)(R32/R29)   // Коэффициент передачи датчика напряжения U_LOAD, U_BATTERY, U_KAN_D

#define R41   20   		  //Сопротивление резистора R41, кОм			
#define R42   20    	  //Сопротивление резистора R42, кОм			
#define KdU2	R41/R42   // Коэффициент передачи для напряжения ZERO

/*Коэффициенты преобразования из кодового представления в СИ (реальное) */
#define	ADC_I_LOAD_koef				(float)(Vref/(KdI*Nmax)) 	//Тока нагрузки 
#define	ADC_I_BATTERY_koef		(float)(Vref/(KdI*Nmax))		//Тока батареи
#define	ADC_U_LOAD_koef				(float)(Vref/(KdU1*Nmax))	//Напряжения нагрузки 
#define	ADC_U_BATTERY_koef		(float)(Vref/(KdU1*Nmax))	//Напряжения батареи
#define	ADC_U_KAN_D_koef			(float)(Vref/(KdU1*Nmax))	//Напряжения с выхода КАН_Д 
#define	ADC_U_ZERO_koef				(float)(Vref/(KdU2*Nmax))	//Напряжения псевдо нулевого потенциала
#define	ADC_KAN_D_TYPE_koef		(float)(Vref/Nmax)					//Напряжения псевдо нулевого потенциала ADC7_KAN_D_TYPE
/*===================================================================================================================================================================================================*/
/*===============================================================ПАРАМЕТРИЧЕСКИЕ КОНСТАНТЫ===========================================================================================================*/
/*===================================================================================================================================================================================================*/

//диапазон изменения напряжения U_LOAD, B
#define U_LOAD_MAX_VALUE (float)U_BATTERY_EQUALIZING
#define U_LOAD_MIN_VALUE (float)19

//диапазон изменения напряжения U_KAN_D, B
#define U_KAN_D_MAX_VALUE (float)24.5
#define U_KAN_D_MIN_VALUE (float)22.8							 //минимальное значение выходного напряжения КАН-Д, после которого фиксируется, что КАН-Д отключился от сети
#define U_KAN_D_MIN_VALUE_FROM_FACTORY (float)20.0 //минимальное значение выходного напряжения КАН-Д, заложенное производителем	
	

//диапазон изменения тока нагрузки, A
#define I_LOAD_MAX_VALUE (float)10
#define I_LOAD_MIN_VALUE 0

//Константы Батареи
#define U_BATTERY_MAX_VALUE 	32			//Максимальный уровень напряжения Батареи, В
#define U_BATTERY_MIN_VALUE 	19			//Минимальный уровень напряжения Батареи, В
#define U_BATTERY_TRICLE 			20			//уровень напряжения на батареи, превышение которого переведет режим заряда в режим Быстрой зарадки (BULK_CHARGE), В
#define U_BATTERY_OVER 				(float)28.56		//уровень напряжения на батареи, который должен поддерживаться в режиме Перезаряда (OVER_CHARGE), В
#define U_BATTERY_EQUALIZING	(float)28.8		//уровень напряжения на батареи, который должен поддерживаться в режиме Уравнительного заряда (EQUALIZING_CHARGE), В
#define U_BATTERY_FLOAT 			(float)27.24		//уровень напряжения на батареи, который должен поддерживаться в Буферном режиме (FLOAT_CHARGE), В


#define U_BATTERY_LEVEL_100		(float)25.4 		//уровень заряда батерии в холостом ходу, соответствующая уровню заряда больше 100%
#define U_BATTERY_LEVEL_85		(float)24.7		//уровень заряда батерии в холостом ходу, соответствующая уровню заряда больше 85%
#define U_BATTERY_LEVEL_50		(float)24.0		//уровень заряда батерии в холостом ходу, соответствующая уровню заряда больше 50%
#define U_BATTERY_LEVEL_20		(float)23.0		//уровень заряда батерии в холостом ходу, соответствующая уровню заряда больше 20%
#define U_BATTERY_LEVEL_5			(float)22.5		//уровень заряда батерии в холостом ходу, соответствующая уровню заряда больше 5%
#define U_HYSTERESIS 					(float)0.1			//величина гистерезиса напряжения, В
#define I_BATTERY_MAX_CHARGE	(float)3.0			//максимальный ток заряда батареи, [А]
#define I_BATTERY_MIN_CHECK_BATTERY_CONNECT		0.1	  //минимальное значение тока заряда батареи, ниже которого принимается что батарея отключена, [А]		
#define I_BATTERY_MAX_DISCHARGE	(I_LOAD_MAX_VALUE)			//максимальный ток разряда батареи, [А]
#define I_BATTERY_MIN						0		  	//минимальное значение тока заряда батареи, [А]		
#define I_HYSTERESIS 						(float)0.1			//величина гистерезиса тока, А
#define CAPACITY_koef   				(float)1000		//т.к в перечислении BatCap приводится емкость в миллиампер*часы,то коэффициенты I_TRICLE_koef, I_BULK_koef, I_OVER_koef необходимо делить на CAPACITY_koef
#define I_TRICLE_koef	 		  		(uint16_t)(30)		//токовый коэффициент в режиме восстановления емкости (TRICLE_CHARGE) (коэффициент представлен в милли, то есть в 10е-3 степени)
#define I_BULK_koef 		    		(uint16_t)(200)	  //токовый коэффициент в режиме Быстрой зарядки (BULK_CHARGE) (коэффициент представлен в милли, то есть в 10е-3 степени)
#define I_OVER_koef 		    		(uint16_t)(40)  	//токовый коэффициент для перехода из режима Перезарядки (OVER_CHARGE) в Буферный режим (FLOAT_CHARGE) (коэффициент представлен в милли, то есть в 10е-3 степени)
#define I_CHARGE_MIN_koef       (uint16_t)(100)		//токовый коффициент для фиксации уменьшения тока заряда батереи ниже величины в амперах Battery.Capacity*I_CHARGE_MIN_koef (коэффициент представлен в милли, то есть в 10е-3 степени)
#define SAFETY_koef							(float)1.1			//Коэффициент запаса измеряемой величины при превышении максимально допустимого значения. Например,  если I_LOAD>LOAD_MAX_VALUE, то защита сработает при превышении LOAD_MAX_VALUE*SAFETY_koef
#define DEVISION_koef						(float)1000.0		//коэффициент	деления для преобразования в милли 

#define T_BATTERY_MAX_VALUE 					 50				//максимальное значение температуры батареи, [Град.Ц.]
#define T_BATTERY_MIN_VALUE_CHARGE 		-10				//минимальное значение температуры батареи при заряде, [Град.Ц.]
#define T_BATTERY_MIN_VALUE_DISCHARGE -20				//минимальное значение температуры батареи при разряде, [Град.Ц.]
#define T_BATTERY_45_DEGREE						 45				//температура батареи 45 градусов, [Град.Ц.]
#define T_BATTERY_DEFAULT							 25				//температура по умолчанию, при отсутствии датчика температуры на шине, [Град.Ц.]
#define T_HYSTERESIS									 (float)0.3				//величина гистерезиса температуры, [Град.Ц.]
#define T_koef   										   (float)0.0625		//Температурный коэффициент, с помощью которого производится перевод из кодового представления в реальное (соотвествует 12битному разрешению датчика температуры)
#define T_COMPENSATION_KOEF_OVER_MODE	 (uint16_t)(60)			//Коэффициент температурной компенсации в режиме OVER (Перезаряд), [мB/Град.Ц.]
#define T_COMPENSATION_KOEF_FLOAT_MODE (uint16_t)(40)			//Коэффициент температурной компенсации в режиме FLOAT (Буферный), [мB/Град.Ц.]

//уровни заряда батареи в проценте от максимального зарадя
#define BATTERY_LEVEL_0 	0		//уровень заряда батареи 0%
#define BATTERY_LEVEL_5 	5		//уровень заряда батареи 5%
#define BATTERY_LEVEL_20 20		//уровень заряда батареи 20%
#define BATTERY_LEVEL_50 50		//уровень заряда батареи 50%
#define BATTERY_LEVEL_85 85		//уровень заряда батареи 85%

#define BATTERY_LEVEL_LESS_5 				4		//уровень заряда батареи меньще 5%
#define BATTERY_LEVEL_BETWEEN_5_20 	15		//уровень заряда батареи между 5% и 20%
#define BATTERY_LEVEL_BETWEEN_20_50 35		//уровень заряда батареи между 20% и 50%
#define BATTERY_LEVEL_BETWEEN_50_85 65		//уровень заряда батареи между 50% и 85%
#define BATTERY_LEVEL_MORE_85 			90		//уровень заряда батареи больше 85%

#define BATTERY_MAX_AMOUNT_OF_UNDERCHARGE	20	//максимальное количество непрерывных недоразрядов батареи, при превышении которого принимается, что батарея систематически недозаряжается

#define BATTERY_INTERNAL_RESISTOR_DEFAULT (float)0.189		//внутренее сопротивление батареи расчитанное эмпирическим путем для батареи емкостью BATTERY_CAPACITY_FOR_INTERNAL_RESISTOR_DEFAULT. 
																								  //На основе этого значения будут расчитаны внутрение сопротивения для батаерий других емкостей, ОМ
#define BATTERY_CAPACITY_FOR_INTERNAL_RESISTOR_DEFAULT 5800 //емкость батареи на которой эмпирическим путем было BATTERY_INTERNAL_RESISTOR_DEFAULT, mА*ч

#if REALISE==FINAL
#define TIME_CHECKING_I_BATTERY_IS_CONST_EQUALIZING_CHARGE	120	//время в течении которого требуется зафиксировать постоянство (в рамках DELTA_OF_I_BATTERY_EQUALIZING_CHARGE) тока заряда батареи в режиме EQUALIZING (Уравнительный заряд), минуты
#elif REALISE==TEST
#define TIME_CHECKING_I_BATTERY_IS_CONST_EQUALIZING_CHARGE	1	//время в течении которого требуется зафиксировать постоянство (в рамках DELTA_OF_I_BATTERY_EQUALIZING_CHARGE) тока заряда батареи в режиме EQUALIZING (Уравнительный заряд), минуты
#endif

#define DELTA_OF_I_BATTERY_EQUALIZING_CHARGE	0.1		//максимальное относительное изменение тока заряда батареи в режиме EQUALIZING (Уравнительный заряд) при котором считается, что ток не изменятеся (Constant), A

////проверка корректности ввода Параметрических констант
//#if (U_LOAD_MAX_VALUE <=  U_LOAD_MIN_VALUE)
//#error "Величины U_LOAD_MAX_VALUE и U_LOAD_MIN_VALUE введены неверно"
//#endif

//#if  (U_BATTERY_MAX_VALUE <=  U_BATTERY_MIN_VALUE)
//#error "Величины U_BATTERY_MAX_VALUE и U_BATTERY_MIN_VALUE введены неверно"
//#endif




#define R116	(float)1.0 						//Ом
#define R117	(float)30100.0 				//Ом
#define Y1    (float)(1/(R116+R117))//Сименс
#define R118	(float)3000.0 				//Ом
#define R119	(float)243.0 					//Ом
#define Y2    (float)(1/(R118+R119))//Сименс
#define R120	(float)4530.0 				//Ом
#define R121	(float)10000.0				//Ом
#define Y3    (float)(1/(R120+R121))//Сименс
#define R24		(float)6190.0					//Ом
#define R27		(float)12400.0				//Ом
#define Ky_Charge_Control	(float)(1+R24/R27)	//Коэффциент усиления сигнала с ЦАП, регулирующего напряжение на повышающем регуляторе (ножка PE0)
#define U1		(float)2.5							//Напряжение на делителе напряжения (точка соединения R117, R118, R120)




/*===================================================================================================================================================================================================*/
/*================================================================КОНСТАНТЫ МОСТА I2C-1 WIRE (OW)===========================================================================================================*/
/*===================================================================================================================================================================================================*/
//Устройство конвертирования I2C в OW (DS2482-100)
#define ID_CONVERTER_I2C_to_OW_WRITE  0x32			//Номер устройства конвертирования из интерфейса I2C в OW в режиме записи данных
#define ID_CONVERTER_I2C_to_OW_READ	  0x33 		//Номер устройства конвертирования из интерфейса I2C в OW в режиме чтения данных
#define CONVERTER_I2C_to_OW_RESET 		0xF0			//Команда сброса настроек устройства конвертирования из интерфейса I2C в OW
#define CONVERTER_I2C_SET_POINTER			0xE1			//Команда на считывание какого-то регистра конвертора I2C-OW
#define CONVERTER_I2C_DATA_REGISTER	 	0xE1			//Команда считывания регистра данных
#define CONVERTER_I2C_CONFIG_REGISTER	0xC3			//Команда обращения к регистру конфигурации
#define CONVERTER_I2C_STATUS_REGISTER	0xF0			//Команда обращения к регистру статуса
#define CONVERTER_I2C_WRITE_CONFIG		0xD2			//Команда записи новой конфигурации
#define OW_SINGLE_BIT								  0x87			//Команда считывания регистра данных
#define OW_WRITE_BYTE								  0xA5			//Команда сигнализирующая, что принятые данные нужно отправить по OW
#define OW_READ_BYTE								  0x96			//Команда считывания байта данных с устройства OW
#define OW_RESET										  0xB4			//Команда сброса устройства OW
#define OW_HIGH_SPEED								  0x78			//1WS=1 высокая скорость передачи данных по OW
#define ID_CONVERTER_I2C_to_OW_FAULT_MAX_COUNT  10		//Максимальное количичество неудавшихся попыток связи с преобразователем I2C в OW, при превышении которого считается что он не работает

//Цифровой датчик температуры работающих по интерфейсу OW (DS18B20)
#define MESSAGE_TO_ALL_OW_DEVICES 	 0xCC			//Обращение ко всем устройствам OW находящихся на линии
#define START_CALCULATE_TEMPERATURE	 0x44			//Команда запуска расчета температуры
#define READ_TEMPERATURE	 					 0xBE			//чтение расчитанной температуры
#define READ_ROM_DEVICE						 	 0x33			//Обращение ко всем устройствам OW находящихся на линии
#define RESULT_9BIT_RESOLUTION		 	 0x1F			//Результат преобразования 9-ти битный
#define WRITE_CONFIG_OW_DEVICE		 	 0x4E			//Команда запуска записи данных в регистры конфигурации (Temperature High (TH), Temperature Low (TL), Configuraton)
#define COPY_RAM_TO_ROM_OW_DEVICE		 0x48			//Команда комирования регистров конфигурации (Temperature High (TH), Temperature Low (TL), Configuraton) из RAM в ROM 
#define NUMBER_OF_LAST_RECIEVED_BYTE 0x01			//Номер последнего байта (1-номер старшего байта регистра результата, а так последний байт должен быть 8, где уже передается контрольная сумма)
#define ROM_bytes										 0x08			//Количество байтов в уникальном номере датчика температуры
#define SIGH_TEMPERATURE_MASK				 0xF800		//Маска для определения знака температуры
#define OW_FAULT_MAX_COUNT 					 10				//Максимальное количичество неудавшихся попыток связи с устройством ОW, при превышении которого считается что оно не работает
#define OW_PRESENCE_MASK						 0x02			//Маска для чтения бита присутствия OW устройства на шине OW						

/*===================================================================================================================================================================================================*/
/*================================================================КОНСТАНТЫ UART (RS-485) и MODBUS===================================================================================================*/
/*===================================================================================================================================================================================================*/

#define UART1_IO_BAUDRATE						38400	//скорость передачи данных
#define DEVICE_ADRESS_DEFAULT 			0xFF	//адрес устройства по умолчанию
#define ADRESS_BYTE									0x00	//номер байта адреса в пакете
#define COMMAND_BYTE								0x01	//номер байта команды в пакете
#define REGISTOR_HIGH_BYTE					0x02	//номер байта старшего байта регистра данных в пакете
#define REGISTOR_LOW_BYTE						0x03	//номер байта младшего байта регистра данных в пакете
#define DATA_HIGH_BYTE							0x04	//номер байта старшего байта запрашиваемых/отправляемых данных в пакете
#define DATA_LOW_BYTE								0x05	//номер байта младшего байта запрашиваемых/отправляемых данных в пакете
#define READ_DATA_COMMAND						0x03	//команда на чтение данных
#define WRITE_DATA_COMMAND					0x06	//команда на запись данных
#define WRITE_DATA_FEW_REG_COMMAND	0x10	// команда на запись значений в несколько регистров хранения
#define READ_ID_DEVICE_COMMAND			0x11	//команда на чтение уникательного номера устройства
#define SIZE_OF_REGISTER_DATA				2			//размер одного регистра в байтах

#define MAX_DATA_SIZE_BYTES 		120	//максимальный размер пакета (принимаемого, отправляемого) в байтах

#define MODBUS_koef_1						100.f			//коэффициент преобразования 1 для передачи данных по протоколу MODBUS (см. документ "Протокол связи между ИБП-Д и ПК")
#define MODBUS_koef_2						DEVISION_koef		//коэффициент преобразования 2 для передачи данных по протоколу MODBUS (см. документ "Протокол связи между ИБП-Д и ПК")

#define TEMP_SENS_IS_NOT_CONNECT  0x7FFF	//сообщние о том, что датчик температуры не подключен

#define MASK_USER_CODE_VALUE	0x7FFFFFFF		//маска для сброса старшего бита кодового представления емкости и времени разряда, которое задал пользователь
#define MASK_USER_REAL_VALUE	0x7FFF				//маска для сброса старшего бита реального (мА*ч и минуты или секунды)представления емкости и времени разряда, которое задал пользователь

#define USER_BIT_FOR_CODE_VALUE 0x80000000	//выставление старшего бита в кодовом представлении емкости и времени разряда для обозначения, что величину задал пользователь
#define USER_BIT_FOR_REAL_VALUE 0x8000			//выставление старшего бита в реальном представлении емкости и времени разряда для обозначения, что величину задал пользователь


/*===================================================================================================================================================================================================*/
/*================================================================КОНСТАНТЫ FLASH===================================================================================================*/
/*===================================================================================================================================================================================================*/
#define ADRESS_FLASH_SETTINGS_SAVE 	0x0800A000 //начальный адрес FLASH, начиная с которого во FLASH будут сохраняться принятые уставки
#define ADRESS_FLASH_ID_DEVICE_SAVE 0x0800B000 //начальный адрес FLASH, начиная с которого во FLASH будет сохраняться идентификационная карта устройства
#define AMOUT_SAVED_SETTINGS 					22				//количество уставок, которые нужно сохранить
#define CELL_IS_EMPTY							 0xFFFFFFFF //значение пустой 32х битной ячейки
#define FLASH_koef_1						(float)100.			//коэффициент преобразования 1 для сохранения уставок во FLASH
#define FLASH_koef_2						(float)100000.		//коэффициент преобразования 2 для сохранения уставок во FLASH
	
/*===================================================================================================================================================================================================*/
/*================================================================ИДЕНТИФИКАТОР УСТРОЙСТВА===================================================================================================*/
/*===================================================================================================================================================================================================*/
#define ID_AMOUNT_BYTE				35			//количество байт информации в идентификационной карте устройства

#define DEVICE_NAME_BYTE			11			//количество байт данных массива имени устройства
#define FIRMWARE_VERSION_BYTE	6				//количество байт данных массива версии устройства/ПО
#define ORDER_NUMBER_BYTE			9				//количество байт данных массива номера заказа
#define BATCH_NUMBER_BYTE			8				//количество байт данных массива номера партии
#define NUMBER_IN_BATCH_BYTE	1				//количество байт данных номера в партии

#define PASSWORD_ID						'KVS'	//пароль для записи/внесения изменения данных в идентификационную карту
#define PASSWORD_ID_BYTE			3			//количество байт данных пароля PASSWORD_ID

#define DEVICE_NAME {'U','P','S','-','D','-','2','4','0'}

	