<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\IBP-D firmware.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\IBP-D firmware.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Tue Dec 27 12:36:16 2022
<BR><P>
<H3>Maximum Stack Usage =        164 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Initialization &rArr; uart1_init &rArr; UART_Init &rArr; RST_CLK_GetClocksFreq
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[17]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">ADC_IRQHandler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[1a]">BACKUP_IRQHandler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[a]">CAN1_IRQHandler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[b]">CAN2_IRQHandler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[18]">COMPARATOR_IRQHandler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[d]">DMA_IRQHandler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[1b]">EXT_INT1_IRQHandler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[1c]">EXT_INT2_IRQHandler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[1d]">EXT_INT3_IRQHandler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[1e]">EXT_INT4_IRQHandler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[11]">I2C_IRQHandler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[12]">POWER_IRQHandler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[10]">SSP1_IRQHandler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[19]">SSP2_IRQHandler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_mdr32f9q2i.o(i.SystemInit) referenced from startup_mdr32f9q2i.o(.text)
 <LI><a href="#[14]">Timer1_IRQHandler</a> from interrupts.o(i.Timer1_IRQHandler) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[15]">Timer2_IRQHandler</a> from interrupts.o(i.Timer2_IRQHandler) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[16]">Timer3_IRQHandler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[e]">UART1_IRQHandler</a> from interrupts.o(i.UART1_IRQHandler) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[f]">UART2_IRQHandler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[c]">USB_IRQHandler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_mdr32f9q2i.o(.text) referenced from startup_mdr32f9q2i.o(RESET)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mdr32f9q2i.o(.text)
 <LI><a href="#[1f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[22]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[27]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[95]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[96]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[97]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[98]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[99]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>BACKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>CAN2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>COMPARATOR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXT_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXT_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXT_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXT_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>POWER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SSP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>Timer3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9q2i.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Create_Transmitted_Package
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Analog_Value_Answer
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_I2C_Recieved_Data
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calculate
</UL>

<P><STRONG><a name="[24]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_I2C_Recieved_Data
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calculate
</UL>

<P><STRONG><a name="[26]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_I2C_Recieved_Data
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calculate
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Create_Transmitted_Package
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Analog_Value_Answer
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;struct_config
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Create_Transmitted_Package
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Of_KAN_D
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Of_KAN_D
</UL>

<P><STRONG><a name="[9b]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[23]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[9d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>ADC1_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32fxqi_adc.o(i.ADC1_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[2b]"></a>ADC1_GetResult</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32fxqi_adc.o(i.ADC1_GetResult))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calculate
</UL>

<P><STRONG><a name="[2a]"></a>ADC1_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32fxqi_adc.o(i.ADC1_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calculate
</UL>

<P><STRONG><a name="[74]"></a>ADC1_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, mdr32fxqi_adc.o(i.ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[29]"></a>ADC1_Start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32fxqi_adc.o(i.ADC1_Start))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calculate
</UL>

<P><STRONG><a name="[28]"></a>ADC_Calculate</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, function_interrupts.o(i.ADC_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Calculate &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Start
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetStatus
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetResult
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>ADC_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mdr32fxqi_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[55]"></a>CRC_Check</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, rs485_interface.o(i.CRC_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Create_Transmitted_Package
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_ReadData
</UL>

<P><STRONG><a name="[2d]"></a>Check_OW_Presence</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, i2c_interface.o(i.Check_OW_Presence))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_OW_Presence
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetReceivedData
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Counter_Handling
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Presence
</UL>

<P><STRONG><a name="[59]"></a>Convert_And_Save_Receive_Parameters</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rs485_interface.o(i.Convert_And_Save_Receive_Parameters))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Handling_Data
</UL>

<P><STRONG><a name="[2f]"></a>Counter_Handling</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, function_interrupts.o(i.Counter_Handling))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_OW_Presence
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temperature
</UL>

<P><STRONG><a name="[32]"></a>Create_2Byte_Answer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rs485_interface.o(i.Create_2Byte_Answer))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Create_Transmitted_Package
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Analog_Value_Answer
</UL>

<P><STRONG><a name="[30]"></a>Create_Analog_Value_Answer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rs485_interface.o(i.Create_Analog_Value_Answer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_Analog_Value_Answer &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_2Byte_Answer
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Create_Transmitted_Package
</UL>

<P><STRONG><a name="[77]"></a>DAC2_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32fxqi_dac.o(i.DAC2_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac2_init
</UL>

<P><STRONG><a name="[76]"></a>DAC2_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32fxqi_dac.o(i.DAC2_Init))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac2_init
</UL>

<P><STRONG><a name="[66]"></a>DAC2_SetData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32fxqi_dac.o(i.DAC2_SetData))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac2_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testing_UPS_D
</UL>

<P><STRONG><a name="[33]"></a>DeviceID_From_Flash</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, initialization.o(i.DeviceID_From_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DeviceID_From_Flash &rArr; EEPROM_ReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadWord (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialization
</UL>

<P><STRONG><a name="[35]"></a>Handler_Temperature</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, i2c_interface.o(i.Handler_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Handler_Temperature &rArr; I2C_Read &rArr; Save_I2C_Recieved_Data &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Write_Byte
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Reset
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Presence
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OW_Converter_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temperature
</UL>

<P><STRONG><a name="[3b]"></a>I2C_CheckEvent</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mdr32fxqi_i2c.o(i.I2C_CheckEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetLastEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Write_Byte
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Reset
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Presence
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OW_Converter_Reset
</UL>

<P><STRONG><a name="[7b]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32fxqi_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[79]"></a>I2C_DeInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32fxqi_i2c.o(i.I2C_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[3c]"></a>I2C_GetLastEvent</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32fxqi_i2c.o(i.I2C_GetLastEvent))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
</UL>

<P><STRONG><a name="[2e]"></a>I2C_GetReceivedData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32fxqi_i2c.o(i.I2C_GetReceivedData))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_I2C_Recieved_Data
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_OW_Presence
</UL>

<P><STRONG><a name="[7a]"></a>I2C_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mdr32fxqi_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[36]"></a>I2C_OW_Converter_Reset</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, i2c_interface.o(i.I2C_OW_Converter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_OW_Converter_Reset &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delays
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendSTOP
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Temperature
</UL>

<P><STRONG><a name="[3a]"></a>I2C_Read</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, i2c_interface.o(i.I2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Read &rArr; Save_I2C_Recieved_Data &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_StartReceiveData
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delays
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_I2C_Recieved_Data
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendSTOP
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Temperature
</UL>

<P><STRONG><a name="[3d]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32fxqi_i2c.o(i.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Write_Byte
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Reset
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Presence
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OW_Converter_Reset
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[3f]"></a>I2C_SendByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32fxqi_i2c.o(i.I2C_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Write_Byte
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Reset
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Presence
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OW_Converter_Reset
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[40]"></a>I2C_SendSTOP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32fxqi_i2c.o(i.I2C_SendSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Write_Byte
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Reset
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Presence
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OW_Converter_Reset
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[41]"></a>I2C_StartReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mdr32fxqi_i2c.o(i.I2C_StartReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Reset
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Presence
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
</UL>

<P><STRONG><a name="[43]"></a>Initialization</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, initialization.o(i.Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Initialization &rArr; uart1_init &rArr; UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;struct_config
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_clock_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac2_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceID_From_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>Led_Lighting</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, function_interrupts.o(i.Led_Lighting))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_IRQHandler
</UL>

<P><STRONG><a name="[38]"></a>OW_Presence</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, i2c_interface.o(i.OW_Presence))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OW_Presence &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_StartReceiveData
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delays
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_OW_Presence
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendSTOP
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Temperature
</UL>

<P><STRONG><a name="[37]"></a>OW_Reset</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, i2c_interface.o(i.OW_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OW_Reset &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_StartReceiveData
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delays
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendSTOP
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Temperature
</UL>

<P><STRONG><a name="[39]"></a>OW_Write_Byte</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, i2c_interface.o(i.OW_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OW_Write_Byte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delays
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendSTOP
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Temperature
</UL>

<P><STRONG><a name="[72]"></a>PORT_Init</STRONG> (Thumb, 450 bytes, Stack size 48 bytes, mdr32fxqi_port.o(i.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac2_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[53]"></a>PORT_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32fxqi_port.o(i.PORT_ReadInputData))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Create_Transmitted_Package
</UL>

<P><STRONG><a name="[51]"></a>PORT_ReadInputDataBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32fxqi_port.o(i.PORT_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Create_Transmitted_Package
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testing_UPS_D
</UL>

<P><STRONG><a name="[63]"></a>PORT_ResetBits</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32fxqi_port.o(i.PORT_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rele_Status
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;struct_config
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testing_UPS_D
</UL>

<P><STRONG><a name="[62]"></a>PORT_SetBits</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32fxqi_port.o(i.PORT_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rele_Status
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testing_UPS_D
</UL>

<P><STRONG><a name="[71]"></a>PORT_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32fxqi_port.o(i.PORT_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac2_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[50]"></a>RS485_Create_Transmitted_Package</STRONG> (Thumb, 784 bytes, Stack size 24 bytes, rs485_interface.o(i.RS485_Create_Transmitted_Package))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RS485_Create_Transmitted_Package &rArr; Create_Analog_Value_Answer &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SendData
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Analog_Value_Answer
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_2Byte_Answer
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Check
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ReadInputDataBit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ReadInputData
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Of_KAN_D
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Handling_Data
</UL>

<P><STRONG><a name="[57]"></a>RS485_Handling_Data</STRONG> (Thumb, 334 bytes, Stack size 8 bytes, rs485_interface.o(i.RS485_Handling_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RS485_Handling_Data &rArr; RS485_Create_Transmitted_Package &rArr; Create_Analog_Value_Answer &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Registers_Data
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Create_Transmitted_Package
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_And_Save_Receive_Parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_ReadData
</UL>

<P><STRONG><a name="[5a]"></a>RS485_ReadData</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, rs485_interface.o(i.RS485_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RS485_ReadData &rArr; RS485_Handling_Data &rArr; RS485_Create_Transmitted_Package &rArr; Create_Analog_Value_Answer &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Handling_Data
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>RS485_SendData</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rs485_interface.o(i.RS485_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RS485_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Create_Transmitted_Package
</UL>

<P><STRONG><a name="[80]"></a>RST_CLK_CPU_PLLcmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_CPU_PLLcmd))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_clock_init
</UL>

<P><STRONG><a name="[7f]"></a>RST_CLK_CPU_PLLconfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_CPU_PLLconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_CPU_PLLconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_clock_init
</UL>

<P><STRONG><a name="[5d]"></a>RST_CLK_CPU_PLLstatus</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_CPU_PLLstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RST_CLK_CPU_PLLstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_clock_init
</UL>

<P><STRONG><a name="[82]"></a>RST_CLK_CPU_PLLuse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_CPU_PLLuse))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_clock_init
</UL>

<P><STRONG><a name="[81]"></a>RST_CLK_CPUclkPrescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_CPUclkPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_clock_init
</UL>

<P><STRONG><a name="[83]"></a>RST_CLK_CPUclkSelection</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_CPUclkSelection))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_clock_init
</UL>

<P><STRONG><a name="[6f]"></a>RST_CLK_GetClocksFreq</STRONG> (Thumb, 620 bytes, Stack size 44 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RST_CLK_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[5e]"></a>RST_CLK_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEstatus
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLstatus
</UL>

<P><STRONG><a name="[7e]"></a>RST_CLK_HSEconfig</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_HSEconfig))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_clock_init
</UL>

<P><STRONG><a name="[5f]"></a>RST_CLK_HSEstatus</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_HSEstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RST_CLK_HSEstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_clock_init
</UL>

<P><STRONG><a name="[70]"></a>RST_CLK_PCLKcmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32fxqi_rst_clk.o(i.RST_CLK_PCLKcmd))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac2_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[60]"></a>Read_Temperature</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, i2c_interface.o(i.Read_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Read_Temperature &rArr; Handler_Temperature &rArr; I2C_Read &rArr; Save_I2C_Recieved_Data &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Temperature
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Counter_Handling
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>Rele_Status</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, function.o(i.Rele_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Rele_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;struct_config
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testing_UPS_D
</UL>

<P><STRONG><a name="[42]"></a>Save_I2C_Recieved_Data</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, i2c_interface.o(i.Save_I2C_Recieved_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Save_I2C_Recieved_Data &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetReceivedData
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
</UL>

<P><STRONG><a name="[64]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, system_mdr32f9q2i.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_clock_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, system_mdr32f9q2i.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>TIMER_BRGInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, mdr32fxqi_timer.o(i.TIMER_BRGInit))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
</UL>

<P><STRONG><a name="[67]"></a>TIMER_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32fxqi_timer.o(i.TIMER_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>TIMER_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32fxqi_timer.o(i.TIMER_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
</UL>

<P><STRONG><a name="[88]"></a>TIMER_CntInit</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mdr32fxqi_timer.o(i.TIMER_CntInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMER_CntInit
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
</UL>

<P><STRONG><a name="[87]"></a>TIMER_CntStructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32fxqi_timer.o(i.TIMER_CntStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
</UL>

<P><STRONG><a name="[85]"></a>TIMER_DeInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, mdr32fxqi_timer.o(i.TIMER_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
</UL>

<P><STRONG><a name="[89]"></a>TIMER_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mdr32fxqi_timer.o(i.TIMER_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
</UL>

<P><STRONG><a name="[65]"></a>Testing_UPS_D</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, function.o(i.Testing_UPS_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Testing_UPS_D &rArr; Rele_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ReadInputDataBit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rele_Status
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC2_SetData
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14]"></a>Timer1_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, interrupts.o(i.Timer1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timer1_IRQHandler &rArr; ADC_Calculate &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearFlag
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Lighting
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Counter_Handling
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calculate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Timer2_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, interrupts.o(i.Timer2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Warning_Handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>Type_Of_KAN_D</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, function.o(i.Type_Of_KAN_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Type_Of_KAN_D
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Create_Transmitted_Package
</UL>

<P><STRONG><a name="[e]"></a>UART1_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, interrupts.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatusMasked
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9q2i.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>UART_BRGInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mdr32fxqi_uart.o(i.UART_BRGInit))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[6c]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32fxqi_uart.o(i.UART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>UART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32fxqi_uart.o(i.UART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[5b]"></a>UART_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32fxqi_uart.o(i.UART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SendData
</UL>

<P><STRONG><a name="[6b]"></a>UART_GetITStatusMasked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32fxqi_uart.o(i.UART_GetITStatusMasked))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>UART_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32fxqi_uart.o(i.UART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[6e]"></a>UART_Init</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, mdr32fxqi_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[6d]"></a>UART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32fxqi_uart.o(i.UART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[5c]"></a>UART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32fxqi_uart.o(i.UART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SendData
</UL>

<P><STRONG><a name="[69]"></a>Warning_Handler</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, function_interrupts.o(i.Warning_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_IRQHandler
</UL>

<P><STRONG><a name="[58]"></a>Write_Registers_Data</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, rs485_interface.o(i.Write_Registers_Data))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Handling_Data
</UL>

<P><STRONG><a name="[9e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[9f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[a0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[46]"></a>adc_init</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, initialization.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = adc_init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_StructInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialization
</UL>

<P><STRONG><a name="[49]"></a>dac2_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, initialization.o(i.dac2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dac2_init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_StructInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC2_SetData
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC2_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC2_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialization
</UL>

<P><STRONG><a name="[3e]"></a>delays</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c_interface.o(i.delays))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Write_Byte
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Reset
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OW_Presence
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OW_Converter_Reset
</UL>

<P><STRONG><a name="[4c]"></a>eeprom_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, initialization.o(i.eeprom_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eeprom_init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SetLatency (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialization
</UL>

<P><STRONG><a name="[4a]"></a>i2c_init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, initialization.o(i.i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = i2c_init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_StructInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendSTOP
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialization
</UL>

<P><STRONG><a name="[4d]"></a>interrupt_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, initialization.o(i.interrupt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = interrupt_init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialization
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = main &rArr; Initialization &rArr; uart1_init &rArr; UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testing_UPS_D
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temperature
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_ReadData
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialization
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[45]"></a>port_init</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, initialization.o(i.port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = port_init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialization
</UL>

<P><STRONG><a name="[44]"></a>rst_clock_init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, initialization.o(i.rst_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rst_clock_init &rArr; RST_CLK_HSEstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEstatus
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEconfig
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkSelection
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkPrescaler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLuse
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLstatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLconfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialization
</UL>

<P><STRONG><a name="[4f]"></a>struct_config</STRONG> (Thumb, 496 bytes, Stack size 8 bytes, initialization.o(i.struct_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = struct_config &rArr; Rele_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rele_Status
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialization
</UL>

<P><STRONG><a name="[47]"></a>timer1_init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, initialization.o(i.timer1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = timer1_init &rArr; TIMER_CntInit
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ITConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_DeInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntStructInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Cmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_BRGInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialization
</UL>

<P><STRONG><a name="[48]"></a>timer2_init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, initialization.o(i.timer2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = timer2_init &rArr; TIMER_CntInit
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ITConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_DeInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntStructInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Cmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_BRGInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialization
</UL>

<P><STRONG><a name="[4b]"></a>uart1_init</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, initialization.o(i.uart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = uart1_init &rArr; UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BRGInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialization
</UL>

<P><STRONG><a name="[4e]"></a>watchdog_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, initialization.o(i.watchdog_init))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialization
</UL>

<P><STRONG><a name="[a1]"></a>EEPROM_ReadByte</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mdr32fxqi_eeprom.o(EXECUTABLE_MEMORY_SECTION), UNUSED)

<P><STRONG><a name="[a2]"></a>EEPROM_ReadHalfWord</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mdr32fxqi_eeprom.o(EXECUTABLE_MEMORY_SECTION), UNUSED)

<P><STRONG><a name="[34]"></a>EEPROM_ReadWord</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, mdr32fxqi_eeprom.o(EXECUTABLE_MEMORY_SECTION))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EEPROM_ReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceID_From_Flash (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ProgramHalfWord
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ProgramByte
</UL>

<P><STRONG><a name="[8e]"></a>EEPROM_ErasePage</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, mdr32fxqi_eeprom.o(EXECUTABLE_MEMORY_SECTION), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDelay
</UL>

<P><STRONG><a name="[90]"></a>EEPROM_EraseAllPages</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, mdr32fxqi_eeprom.o(EXECUTABLE_MEMORY_SECTION), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDelay
</UL>

<P><STRONG><a name="[91]"></a>EEPROM_ProgramWord</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mdr32fxqi_eeprom.o(EXECUTABLE_MEMORY_SECTION), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ProgramHalfWord
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ProgramByte
</UL>

<P><STRONG><a name="[92]"></a>EEPROM_ProgramByte</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, mdr32fxqi_eeprom.o(EXECUTABLE_MEMORY_SECTION), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ProgramWord
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadWord
</UL>

<P><STRONG><a name="[93]"></a>EEPROM_ProgramHalfWord</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, mdr32fxqi_eeprom.o(EXECUTABLE_MEMORY_SECTION), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ProgramWord
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadWord
</UL>

<P><STRONG><a name="[a3]"></a>EEPROM_UpdateDCache</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, mdr32fxqi_eeprom.o(EXECUTABLE_MEMORY_SECTION), UNUSED)

<P><STRONG><a name="[78]"></a>EEPROM_SetLatency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32fxqi_eeprom.o(i.EEPROM_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_init (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7d]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, initialization.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_init
</UL>

<P><STRONG><a name="[7c]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, initialization.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_init
</UL>

<P><STRONG><a name="[8f]"></a>ProgramDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mdr32fxqi_eeprom.o(EXECUTABLE_MEMORY_SECTION), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ProgramWord
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ErasePage
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_EraseAllPages
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
